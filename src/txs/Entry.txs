package de.tomatengames.util.map;
##
:inline=%

extern final string namePrefix;
final string Entry = namePrefix :: "Entry";

extern final string[] keyTypes;

extern final string[] GenKeys;
string GenKey = join(", ", GenKeys);
if (GenKey.length == 0) {
	GenKey = null;
}
extern final string Gen = GenKey ? (GenKey :: ", V") : "V";

extern final string since;
extern string createDate, lastModDate;
if (leq(lastModDate, createDate)) {
	lastModDate = null;
}

function bool leq(string date1, string date2) {
	for (int i = 0; i < date1.length; i++) {
		if (date1[i] < date2[i]) {
			return true;
		}
		if (date1[i] > date2[i]) {
			return false;
		}
	}
	return true; // equals 
}
##

import java.util.ConcurrentModificationException;

/**
 * Represents a key-value mapping.
 * This entry type is used by the {@link %namePrefix;HashMap}.
 * 
 * @param <V> The type of the value.
 * 
 * @author Basic7x7
 * @version
 * %lastModDate ? (lastModDate :: " last modified<br>") : createDate;
 # if (lastModDate) {
 * %createDate; created
 # }
 * @since %since;
 */
// %txsinfo();
public interface %Entry;<%Gen;> {
	
##
for (string key in keyTypes) with (index) {
	##
	/**
	 * Returns %? keyTypes.length > 1 && "part "::(index+1)::" of"; the key of this mapping.
	 * @return The key %? keyTypes.length > 1 && "part";.
	 */
	public %keyTypes[index]; getKey%keyTypes.length > 1 && index+1;();
	
	##
}
##
	
	/**
	 * Returns the value of this mapping.
	 * @return The value. Not {@code null}.
	 */
	public V getValue();
	
	/**
	 * Sets the value of this mapping.
	 * The previous value is replaced.
	 * <p>
	 * This method can be used instead of {@code map.put(key, value)}.
	 * Iterators do not throw a {@link ConcurrentModificationException} if this method is used.
	 * @param value The new value of this mapping. Must not be {@code null}.
	 * @throws IllegalArgumentException If the new value is {@code null}.
	 */
	public void setValue(V value);
}
