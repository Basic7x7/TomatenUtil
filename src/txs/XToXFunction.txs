// @txsinfo();
package de.tomatengames.util.function;
##
:inline=$

extern object inp, out;

if (!inp.prim) {
	inp.java = "I";
}
string Igeneric = !inp.prim && <string> inp.java;

if (!out.prim) {
	out.java = "O";
}
string Ogeneric = !out.prim && <string> out.java;

string generic;
{
	string str = join(", ", [Igeneric, Ogeneric]);
	generic = (str.length > 0 ? "<"::str::">" : (string) null);
}

final string Function = inp.name::"To"::out.name::"Function";
##

/**
 * A function that accepts ##
	if (inp.java == "void") { ##no parameters## }
	else { ##$inp.a; {@code $inp.docName;}## } ## and returns ##
	if (out.java == "void") { ##nothing## }
	else { ##$out.a; {@code $out.docName;}## } ##.
 * 
 * @author Basic7x7
 * @version
 * 2023-04-11 last modified<br>
 * 2021-10-21 created
 * @since 1.2
 */
@FunctionalInterface
public interface $Function;$generic; {
	
	/**
	 * Applies the function.
	 # if (inp.java != "void") {
	 * @param e The argument.
	 # }
	 # if (out.java != "void") {
	 * @return The result.
	 # }
	 */
	public $out.java; apply(##
			if (inp.java != "void") {
				##$inp.java; e##
			}
			##);
#
#
# if (inp.name == out.name && inp.java != "void") {
	
	
	/**
	 * Returns the {@code $inp.docName;} identity function.
	 * The identity function always returns the input argument.
	 * @return The identity function.
	 */
	public static $? !inp.prim && "<T>"; $Function;$!inp.prim && "<T, T>"; identity() {
		return e -> e;
	}
# }
#
#
# if (out.java == "boolean") {
	# string gen = !inp.prim && "<I>";
	# string arg = inp.java != "void" && "e";
	
	
	/**
	 * Returns $inp.a; $Function; that represents {@code !this.apply(e)}.
	 * @return The logical negation of this function.
	 */
	public default $Function;$generic; negate() {
		return ($arg;) -> !this.apply($arg;);
	}
	
	/**
	 * Returns $inp.a; $Function; that represents {@code !func.apply(e)}.
	 * @param func The function to negate. Must not be {@code null}.
	 * @return The logical negation of the specified function.
	 * @throws NullPointerException If the specified function is {@code null}.
	 */
	public static $?gen; $Function;$gen; not($Function;$gen; func) {
		return func.negate();
	}
# }
}