package de.tomatengames.util.function;
##
include <src/txs/include.txs>

extern inpName;
extern outName;
final inp = typeData[inpName];
final out = typeData[outName];

final inpJava = inp.generic ? "I" : inp.java;
final outJava = out.generic ? "O" : out.java;

final Gen = "<" * [inp.generic && "I", out.generic && "O"].join(", ") * ">";
final Function = inp.name::"To"::out.name::"Function";
##

/**
 * A function that accepts %inpJava == "void" ? "no parameters" : "%inp.a; {@code %inp.docName;}";
 * and returns %outJava == "void" ? "nothing" : "%out.a; {@code %out.docName;}";.
 * 
 * @author Basic7x7
 * @version
 * 2023-04-11 last modified<br>
 * 2021-10-21 created
 * @since 1.2
 */
// %cli.txsinfo();
@FunctionalInterface
public interface %Function;%Gen; {
	
	/**
	 * Applies the function.
	 ##
	 if (inpJava != "void") {
	 	##
	 	* @param e The argument.
	 	##
	 }
	 if (outJava != "void") {
	 	##
	 	* @return The result.
	 	##
	 }
	 ##
	 */
	public %outJava; apply(%inpJava != "void" && "%inpuJava; e";);
	
	##
	if (inp.name == out.name && inpJava != "void") {
		##
		/**
		 * Returns the {@code $inp.docName;} identity function.
		 * The identity function always returns the input argument.
		 * @return The identity function.
		 */
		public static %!inp.generic && "<T>"; %Function;%!inp.generic && "<T, T>"; identity() {
			return e -> e;
		}
		
		##
	}
	
	if (outJava == "boolean") {
		final generic = inp.generic && "<I>";
		final arg = inpJava != "void" && "e";
		
		##
		/**
		 * Returns %inp.a; %Function; that represents {@code !this.apply(e)}.
		 * @return The logical negation of this function.
		 */
		public default %Function;%Gen; negate() {
			return ($arg;) -> !this.apply($arg;);
		}
		
		/**
		 * Returns %inp.a; %Function; that represents {@code !func.apply(e)}.
		 * @param func The function to negate. Must not be {@code null}.
		 * @return The logical negation of the specified function.
		 * @throws NullPointerException If the specified function is {@code null}.
		 */
		public static %generic; %Function;%generic; not(%Function;%generic; func) {
			return func.negate();
		}
		
		##
	}
	##
}