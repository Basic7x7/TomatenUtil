package de.tomatengames.util.function;
##
include <src/txs/include.txs>

extern n
extern outName
final out = typeData[outName]

var args = []
for (i := 0; i < n; i++) {
	final type = std.char(std.int(`A`)+i)
	args += { type: type, name: type.lowercase()}
}


var genericTypes = []
if (out.generic) {
	genericTypes += out.generic
}
genericTypes += args.map(a => a.type)
final Gen = "<" * genericTypes.join(", ") * ">"

final Function = "Ref%n;To%out.name;Function";
##

/**
 * A function that accepts %n; generic input parameter%n!=1&&'s'; and returns
 * %out.java == "void" ? "nothing" : "%out.a; {@code %out.docName;}";.
 * 
##
if (out.generic) {
	##
	 * @param <T> The return type.
	 * 
	##
}
##
 * @author Basic7x7
 * @version
 * 2023-04-11 last modified<br>
 * 2023-02-19 created
 * @since 1.2
 */
// %cli.txsinfo();
@FunctionalInterface
public interface %Function;%Gen; {
	
	/**
	 * Applies the function.
	##
	for (arg in args) {
		##
		 * @param %arg.name; An argument.
		##
	}
	if (out.java != "void") {
		##
		 * @return The result.
		##
	}
	##
	 */
	public %out.java; apply(%args.map(a => "%a.type; %a.name;").join(", "););
	
	##
	if (out.java == "boolean") {
		final argNamesStr = args.map(a => a.name).join(", ")
		##
		
		
		/**
		 * Returns a %Function; that represents {@code !this.apply(...)}.
		 * @return The logical negation of this function.
		 */
		public default %Function;%Gen; negate() {
			return (%argNamesStr;) -> !this.apply(%argNamesStr;);
		}
		
		/**
		 * Returns a %Function; that represents {@code !func.apply(...)}.
		 * @param func The function to negate. Must not be {@code null}.
		 * @return The logical negation of the specified function.
		 * @throws NullPointerException If the specified function is {@code null}.
		 */
		public static %Gen; %Function;%Gen; not(%Function;%Gen; func) {
			return func.negate();
		}
		
		##
	}
	##
}